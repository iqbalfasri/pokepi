{"version":3,"sources":["Components/PokemonList.js","lib.js","Pages/Home.js","Pages/DetailPokemon.js","App.js","serviceWorker.js","index.js"],"names":["PokemonList","pokemons","className","map","pokemon","index","key","to","id","src","image","name","fetchData","query","request","Home","useState","setPokemons","fetchTimes","pagination","setPagination","useEffect","a","getPokemons","onClick","DetailPokemon","props","id_pokemon","match","params","console","log","getDetailPokemon","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRA2BeA,MAvBf,YAAoC,IAAbC,EAAY,EAAZA,SACrB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACZD,EAASE,KAAI,SAACC,EAASC,GACtB,OACE,yBAAKC,IAAKD,EAAOH,UAAU,YACzB,kBAAC,IAAD,CAAMA,UAAU,eAAeK,GAAE,kBAAaH,EAAQI,KACpD,yBAAKN,UAAU,+BACb,yBAAKO,IAAKL,EAAQM,SAEpB,yBAAKR,UAAU,sBACb,4BAAKE,EAAQO,e,QCdxB,SAASC,EAAUC,GAExB,OAAOC,kBADU,iCACQD,GC2CZE,MA1Cf,WACE,IADc,EAEkBC,mBAAS,IAF3B,mBAEPf,EAFO,KAEGgB,EAFH,OAGYD,mBAFJ,IADR,gCAIaA,mBAAS,IAJtB,gCAKsBA,mBAAS,IAL/B,mBAKPE,EALO,aAMsBF,mBAAS,IAN/B,mBAMPG,EANO,KAMKC,EANL,KAiCd,OAzBAC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,6DAEQT,EAFR,2CAGsBK,EAAaC,EAHnC,qFAS6BP,EAAUC,GATvC,gBASUZ,EATV,EASUA,SAERgB,EAAYhB,GAXd,4CADc,uBAAC,WAAD,wBAedsB,KACC,CAACtB,IAUF,6BACE,wBAAIC,UAAU,cAAd,qBACA,kBAAC,EAAD,CAAaD,SAAUA,IACvB,4BAAQuB,QAAS,WAPnBJ,EAAcD,EAAa,KAOzB,UCOSM,MA9Cf,SAAuBC,GAAQ,IAAD,EACcV,mBAAS,MADvB,mBAuC5B,OAvC4B,UAG5BK,qBAAU,WAAM,4CACd,kCAAAC,EAAA,6DACQK,EAAaD,EAAME,MAAMC,OAAOrB,GAEhCK,EAHR,wCAImBc,EAJnB,iWA4B4Bf,EAAUC,GA5BtC,gBA4BUT,EA5BV,EA4BUA,QACR0B,QAAQC,IAAI3B,GA7Bd,4CADc,uBAAC,WAAD,wBAiCd4B,KACC,IAGD,6BACE,gDCzBSC,MAXf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,cAAcC,UAAWX,OCDzBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCXNa,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94dd5846.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nfunction PokemonList({ pokemons }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {pokemons.map((pokemon, index) => {\n          return (\n            <div key={index} className=\"col-md-3\">\n              <Link className=\"pokemon-card\" to={`/detail/${pokemon.id}`}>\n                <div className=\"pokemon-card__image-wrapper\">\n                  <img src={pokemon.image} />\n                </div>\n                <div className=\"pokemon-card__name\">\n                  <h3>{pokemon.name}</h3>\n                </div>\n              </Link>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonList;\n","import { request } from \"graphql-request\";\n\nexport function fetchData(query) {\n  const BASE_URL = \"https://graphql-pokemon.now.sh\";\n  return request(BASE_URL, query);\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport PokemonList from \"../Components/PokemonList\";\nimport { fetchData } from \"../lib\";\n\nfunction Home() {\n  const INITIAL_LIMIT = 20;\n  const [pokemons, setPokemons] = useState([]);\n  const [limit, setLimit] = useState(INITIAL_LIMIT);\n  const [offset, setOffet] = useState(0);\n  const [fetchTimes, setFetchTimes] = useState(1);\n  const [pagination, setPagination] = useState(8);\n\n  useEffect(() => {\n    async function getPokemons() {\n      // grapql query\n      const query = `query {\n        pokemons(first: ${fetchTimes * pagination}) {\n          id,\n          image,\n          name\n        }\n      }`;\n      const { pokemons } = await fetchData(query);\n\n      setPokemons(pokemons);\n    }\n\n    getPokemons();\n  }, [pokemons]);\n\n  /**\n   * Simple pagination, trigger with button\n   */\n  const handlePaginate = () => {\n    setPagination(pagination + 8);\n  };\n\n  return (\n    <div>\n      <h1 className=\"main-title\">Pokepi Pok√©mon</h1>\n      <PokemonList pokemons={pokemons} />\n      <button onClick={() => handlePaginate()}>More</button>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { fetchData } from \"../lib\";\n\nfunction DetailPokemon(props) {\n  const [detailPokemon, setDetailPokemon] = useState(null);\n\n  useEffect(() => {\n    async function getDetailPokemon() {\n      const id_pokemon = props.match.params.id;\n\n      const query = `query {\n        pokemon(id: \"${id_pokemon}\") {\n          name\n          image\n          fleeRate\n          maxCP\n\n          height {\n            minimum\n            maximum\n          }\n\n          weight {\n            minimum\n            maximum\n          }\n\n          evolutions {\n            id\n            name\n            image\n          }\n        }\n      }`;\n\n      const { pokemon } = await fetchData(query);\n      console.log(pokemon);\n    }\n\n    getDetailPokemon();\n  }, []);\n\n  return (\n    <div>\n      <h1>Detail Pokemon</h1>\n    </div>\n  );\n}\n\nexport default DetailPokemon;\n","import React, { Fragment } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\n// pages\nimport Home from \"./Pages/Home\";\nimport DetailPokemon from \"./Pages/DetailPokemon\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/detail/:id\" component={DetailPokemon} />\n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}